name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  BUN_VERSION: 'latest'

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'bun'

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run TypeScript type checking
        run: bun run type-check

      - name: Run ESLint
        run: bun run lint

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'bun'

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Create .env.local for build
        run: |
          echo "NEXT_PUBLIC_CONVEX_URL=${{ secrets.NEXT_PUBLIC_CONVEX_URL || 'https://placeholder.convex.cloud' }}" >> .env.local
          echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY || 'pk_test_placeholder' }}" >> .env.local
          echo "CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY || 'sk_test_placeholder' }}" >> .env.local

      - name: Build Next.js application
        run: bun run build
        env:
          SKIP_ENV_VALIDATION: true

      - name: Cache build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .next/static
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/bun.lockb') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/bun.lockb') }}-

  convex-validation:
    name: Validate Convex Schema
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'bun'

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Validate Convex configuration
        run: |
          # Check if Convex schema and functions are valid
          if [ -f "convex/schema.ts" ]; then
            echo "✓ Convex schema file exists"
            # TypeScript compilation will catch schema errors
            npx tsc convex/schema.ts --noEmit --skipLibCheck --esModuleInterop --resolveJsonModule
          else
            echo "✗ Convex schema file not found"
            exit 1
          fi
          
          # Check all Convex function files compile
          for file in convex/*.ts; do
            if [ -f "$file" ]; then
              echo "Checking $file..."
              npx tsc "$file" --noEmit --skipLibCheck --esModuleInterop --resolveJsonModule || exit 1
            fi
          done
          
          echo "✓ All Convex files validated successfully"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'bun'

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests
        run: bun run test

  check-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, build, convex-validation, test]
    if: success()
    
    steps:
      - name: CI Pipeline Successful
        run: |
          echo "✅ All CI checks passed successfully!"
          echo "Ready to merge/deploy"